将网络数据流写入文件时时，我们会遇到几个编码：

1： #encoding='XXX' 这里(也就是python文件第一行的内容)的编码是指该python脚本文件本身的编码，无关紧要。
只要XXX和文件本身的编码相同就行了。 比如notepad++ "格式"菜单里面里可以设置各种编码，
这时需要保证该菜单里设置的编码和encoding XXX相同就行了，不同的话会报错

2：网络数据流的编码 比如获取网页，那么网络数据流的编码就是网页的编码。需要使用decode解码成unicode编码。

3：目标文件的编码 要将网络数据流的编码写入到新文件，那么需要指定新文件的编码。

代码
>>> import re
>>> str = '<a>this is first label</a><a>the second label</a>'

>>> print re.findall(r'<a>(.*?)</a>', str)  # 最短匹配
['this is first label', 'the second label']

>>> print re.findall(r'<a>(.*)</a>', str)
['this is first label</a><a>the second label']


例子中，模式r'(.*?)'的意图是匹配被和包含的文本，但是正则表达式中*操作符是贪婪的，因此匹配操作会查找出最长的可能。
但是在*操作符后面加上？操作符，这样使得匹配变成非贪婪模式，从而得到最短匹配。

    try:
        a = 1/0
    except:
        return
    print("logiiiiiiiiiii")


def test_args(normal_arg, *args):
    print("first normal arg:" + normal_arg)
    for arg in args:
        print("another arg through *args :" + arg)


def normal_func(arg1, arg2, arg3):
    print("arg1: " + arg1)
    print("arg2: " + arg2)
    print("arg3: " + arg3)
    
def test_kwargs(**kwargs):
    if kwargs is not None:
        for key, value in kwargs.iteritems():
            print("{} = {}".format(key,value))
        # Or you can visit kwargs like a dict() object
        # for key in kwargs:
        #    print("{} = {}".format(key, kwargs[key]))
        
test_args("normal", "python", "java", "C#")
args_list = ("python", 1, 3)
kwargs_dict = {"arg3": 3, "arg1": "python", "arg2": 1}
normal_func("python", 1, 3)
normal_func(*args_list)
normal_func(**kwargs_dict)
test_kwargs(name="python", value="5")

def startJVM(jvm=None, *args, **kwargs):

def test(a,*args,**kwargs):
    print a
    #print b
    #print c
    print args
    print kwargs
 
test(1,2,3,d='4',e=5)
输出结果：
1
(2, 3)
{'e': 5, 'd': '4'}
 
意思就是1还是参数a的值，args表示剩余的值，kwargs在args之后表示成对键值对。
